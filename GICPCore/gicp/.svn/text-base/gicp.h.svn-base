#ifndef GICP_H_
#define GICP_H_

#include <roadrunner.h>
#include <velo_support.h>
#include <ANN.h>
#include <vector>
#include <iostream>
#include <gsl.h>
#include <semaphore.h>

#define _GICP_DEBUG_

#ifdef _GICP_DEBUG_
#define GICP_DEBUG(A) A
#else
#define GICP_DEBUG(A) 
#endif


namespace dgc {
  namespace gicp {
    typedef double gicp_mat_t[3][3];
    
    struct GICPPoint {
      double x, y, z;
      float range;
      gicp_mat_t C; // covariance matrix
    };
    
    class GICPPointSet {
    public:
      GICPPointSet(std::ostream const& dout = std::cout);
      ~GICPPointSet();
      void BuildKDTree();
      void ComputeMatrices();
      
      void SavePoints(const char *filename);
      void SaveMatrices(const char *filename);
      
      int num_points() { return (int)point_.size(); }
      void Clear(void);
      int Size() { return point_.size(); }
      void AppendSpin(dgc::dgc_velodyne_spin *spin);
      inline void AppendPoint(GICPPoint const & pt) { point_.push_back(pt); }
      void SetMaxIteration(int iter) { max_iteration_ = iter; }
      void SetMaxIterationInner(int iter) { max_iteration_inner_ = iter; }
      void SetEpsilon(double eps) { epsilon_ = eps; }
      void SetSolveRotation(bool s) { solve_rotation_ = s; }
      void SetGICPEpsilon(double eps) { gicp_epsilon_ = eps; }
      void SetDebug(bool d) { debug_ = d; }


      GICPPoint & operator[](int i) { return point_[i]; }
      GICPPoint const& operator[](int i) const { return point_[i]; }
      void AlignScan(GICPPointSet *scan, dgc_transform_t base_t, dgc_transform_t t, double max_match_dist);

    private:
      std::vector <GICPPoint> point_;
      ANNpointArray kdtree_points_;
      ANNkd_tree *kdtree_;
      int max_iteration_;
      int max_iteration_inner_;
      double epsilon_;
      double epsilon_rot_;
      double gicp_epsilon_;
      bool debug_;
      bool solve_rotation_;
      bool matrices_done_;
      bool kdtree_done_;

      pthread_mutex_t mutex_;
      
      std::ostream const& dout_;
    };
    
  }
  
}

#endif
